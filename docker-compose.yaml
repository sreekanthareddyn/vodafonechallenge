version: '3'

services:
  nodejs:
    build: 
      context: .
      dockerfile: Dockerfile
    image: nodejs
    container_name: nodeJS
    restart: unless-stopped
    environment:
      - PORT:8080
      - DATABASE_HOST:db  
      - DATABASE_PASSWORD:passwd

    depends_on:
      - db
    networks:
      - app-network

  webserver:
    image: nginx:mainline-alpine
    container_name: Webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - web-root:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - dhparam:/etc/ssl/certs
    depends_on:
      - nodejs
    networks:
      - app-network
  
  db:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: passwd 
      MYSQL_DATABASE: helloworld
      MYSQL_USER: user
      MYSQL_PASSWORD: passwd
    ports:
      - '3306:3306'
    expose: 
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - app-network
    

  certbot:
    image: certbot/certbot
    container_name: Certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email sreekanthreddyn@gmail.com --agree-tos --no-eff-email --staging -d sreeexample.tk


volumes:
  certbot-etc: 
  certbot-var:
  web-root:
    driver: local
    driver_opts:
      type: none
      device: /home/ec2-user/docker
      o: bind
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: /home/ec2-user/docker/dhparam/
      o: bind     
  my-db: 

networks:
  app-network:
    driver: bridge  
